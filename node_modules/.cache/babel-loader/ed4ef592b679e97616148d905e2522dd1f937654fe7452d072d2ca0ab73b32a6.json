{"ast":null,"code":"'use strict';\n\nvar iconvLite = require('iconv-lite');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from) {\n  from = checkEncoding(from || 'UTF-8');\n  to = checkEncoding(to || 'UTF-8');\n  str = str || '';\n  var result;\n  if (from !== 'UTF-8' && typeof str === 'string') {\n    str = Buffer.from(str, 'binary');\n  }\n  if (from === to) {\n    if (typeof str === 'string') {\n      result = Buffer.from(str);\n    } else {\n      result = str;\n    }\n  } else {\n    try {\n      result = convertIconvLite(str, to, from);\n    } catch (E) {\n      console.error(E);\n      result = str;\n    }\n  }\n  if (typeof result === 'string') {\n    result = Buffer.from(result, 'utf-8');\n  }\n  return result;\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n  if (to === 'UTF-8') {\n    return iconvLite.decode(str, from);\n  } else if (from === 'UTF-8') {\n    return iconvLite.encode(str, to);\n  } else {\n    return iconvLite.encode(iconvLite.decode(str, from), to);\n  }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n  return (name || '').toString().trim().replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').replace(/^ks_c_5601\\-1987$/i, 'CP949').replace(/^us[\\-_]?ascii$/i, 'ASCII').toUpperCase();\n}","map":{"version":3,"names":["iconvLite","require","module","exports","convert","str","to","from","checkEncoding","result","Buffer","convertIconvLite","E","console","error","decode","encode","name","toString","trim","replace","toUpperCase"],"sources":["C:/Users/Levi/Documents/szakdoga/vizsgaremek/node_modules/encoding/lib/encoding.js"],"sourcesContent":["'use strict';\n\nvar iconvLite = require('iconv-lite');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = Buffer.from(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = Buffer.from(str);\n        } else {\n            result = str;\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n    if (typeof result === 'string') {\n        result = Buffer.from(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '')\n        .toString()\n        .trim()\n        .replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1')\n        .replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1')\n        .replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1')\n        .replace(/^ks_c_5601\\-1987$/i, 'CP949')\n        .replace(/^us[\\-_]?ascii$/i, 'ASCII')\n        .toUpperCase();\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAErC;AACAC,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGA,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,GAAG,EAAEC,EAAE,EAAEC,IAAI,EAAE;EAC5BA,IAAI,GAAGC,aAAa,CAACD,IAAI,IAAI,OAAO,CAAC;EACrCD,EAAE,GAAGE,aAAa,CAACF,EAAE,IAAI,OAAO,CAAC;EACjCD,GAAG,GAAGA,GAAG,IAAI,EAAE;EAEf,IAAII,MAAM;EAEV,IAAIF,IAAI,KAAK,OAAO,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;IAC7CA,GAAG,GAAGK,MAAM,CAACH,IAAI,CAACF,GAAG,EAAE,QAAQ,CAAC;EACpC;EAEA,IAAIE,IAAI,KAAKD,EAAE,EAAE;IACb,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;MACzBI,MAAM,GAAGC,MAAM,CAACH,IAAI,CAACF,GAAG,CAAC;IAC7B,CAAC,MAAM;MACHI,MAAM,GAAGJ,GAAG;IAChB;EACJ,CAAC,MAAM;IACH,IAAI;MACAI,MAAM,GAAGE,gBAAgB,CAACN,GAAG,EAAEC,EAAE,EAAEC,IAAI,CAAC;IAC5C,CAAC,CAAC,OAAOK,CAAC,EAAE;MACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MAChBH,MAAM,GAAGJ,GAAG;IAChB;EACJ;EAEA,IAAI,OAAOI,MAAM,KAAK,QAAQ,EAAE;IAC5BA,MAAM,GAAGC,MAAM,CAACH,IAAI,CAACE,MAAM,EAAE,OAAO,CAAC;EACzC;EAEA,OAAOA,MAAM;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACN,GAAG,EAAEC,EAAE,EAAEC,IAAI,EAAE;EACrC,IAAID,EAAE,KAAK,OAAO,EAAE;IAChB,OAAON,SAAS,CAACe,MAAM,CAACV,GAAG,EAAEE,IAAI,CAAC;EACtC,CAAC,MAAM,IAAIA,IAAI,KAAK,OAAO,EAAE;IACzB,OAAOP,SAAS,CAACgB,MAAM,CAACX,GAAG,EAAEC,EAAE,CAAC;EACpC,CAAC,MAAM;IACH,OAAON,SAAS,CAACgB,MAAM,CAAChB,SAAS,CAACe,MAAM,CAACV,GAAG,EAAEE,IAAI,CAAC,EAAED,EAAE,CAAC;EAC5D;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAaA,CAACS,IAAI,EAAE;EACzB,OAAO,CAACA,IAAI,IAAI,EAAE,EACbC,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,OAAO,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAC7CA,OAAO,CAAC,4BAA4B,EAAE,YAAY,CAAC,CACnDA,OAAO,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CACtCA,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC,CACtCA,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,CACpCC,WAAW,CAAC,CAAC;AACtB"},"metadata":{},"sourceType":"script","externalDependencies":[]}