{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safer-buffer').Buffer;\n\n// == UTF32-LE/BE codec. ==========================================================\n\nexports._utf32 = Utf32Codec;\nfunction Utf32Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n  this.bomAware = true;\n  this.isLE = codecOptions.isLE;\n}\nexports.utf32le = {\n  type: '_utf32',\n  isLE: true\n};\nexports.utf32be = {\n  type: '_utf32',\n  isLE: false\n};\n\n// Aliases\nexports.ucs4le = 'utf32le';\nexports.ucs4be = 'utf32be';\nUtf32Codec.prototype.encoder = Utf32Encoder;\nUtf32Codec.prototype.decoder = Utf32Decoder;\n\n// -- Encoding\n\nfunction Utf32Encoder(options, codec) {\n  this.isLE = codec.isLE;\n  this.highSurrogate = 0;\n}\nUtf32Encoder.prototype.write = function (str) {\n  var src = Buffer.from(str, 'ucs2');\n  var dst = Buffer.alloc(src.length * 2);\n  var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;\n  var offset = 0;\n  for (var i = 0; i < src.length; i += 2) {\n    var code = src.readUInt16LE(i);\n    var isHighSurrogate = 0xD800 <= code && code < 0xDC00;\n    var isLowSurrogate = 0xDC00 <= code && code < 0xE000;\n    if (this.highSurrogate) {\n      if (isHighSurrogate || !isLowSurrogate) {\n        // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low\n        // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character\n        // (technically wrong, but expected by some applications, like Windows file names).\n        write32.call(dst, this.highSurrogate, offset);\n        offset += 4;\n      } else {\n        // Create 32-bit value from high and low surrogates;\n        var codepoint = (this.highSurrogate - 0xD800 << 10 | code - 0xDC00) + 0x10000;\n        write32.call(dst, codepoint, offset);\n        offset += 4;\n        this.highSurrogate = 0;\n        continue;\n      }\n    }\n    if (isHighSurrogate) this.highSurrogate = code;else {\n      // Even if the current character is a low surrogate, with no previous high surrogate, we'll\n      // encode it as a semi-invalid stand-alone character for the same reasons expressed above for\n      // unpaired high surrogates.\n      write32.call(dst, code, offset);\n      offset += 4;\n      this.highSurrogate = 0;\n    }\n  }\n  if (offset < dst.length) dst = dst.slice(0, offset);\n  return dst;\n};\nUtf32Encoder.prototype.end = function () {\n  // Treat any leftover high surrogate as a semi-valid independent character.\n  if (!this.highSurrogate) return;\n  var buf = Buffer.alloc(4);\n  if (this.isLE) buf.writeUInt32LE(this.highSurrogate, 0);else buf.writeUInt32BE(this.highSurrogate, 0);\n  this.highSurrogate = 0;\n  return buf;\n};\n\n// -- Decoding\n\nfunction Utf32Decoder(options, codec) {\n  this.isLE = codec.isLE;\n  this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);\n  this.overflow = [];\n}\nUtf32Decoder.prototype.write = function (src) {\n  if (src.length === 0) return '';\n  var i = 0;\n  var codepoint = 0;\n  var dst = Buffer.alloc(src.length + 4);\n  var offset = 0;\n  var isLE = this.isLE;\n  var overflow = this.overflow;\n  var badChar = this.badChar;\n  if (overflow.length > 0) {\n    for (; i < src.length && overflow.length < 4; i++) overflow.push(src[i]);\n    if (overflow.length === 4) {\n      // NOTE: codepoint is a signed int32 and can be negative.\n      // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).\n      if (isLE) {\n        codepoint = overflow[i] | overflow[i + 1] << 8 | overflow[i + 2] << 16 | overflow[i + 3] << 24;\n      } else {\n        codepoint = overflow[i + 3] | overflow[i + 2] << 8 | overflow[i + 1] << 16 | overflow[i] << 24;\n      }\n      overflow.length = 0;\n      offset = _writeCodepoint(dst, offset, codepoint, badChar);\n    }\n  }\n\n  // Main loop. Should be as optimized as possible.\n  for (; i < src.length - 3; i += 4) {\n    // NOTE: codepoint is a signed int32 and can be negative.\n    if (isLE) {\n      codepoint = src[i] | src[i + 1] << 8 | src[i + 2] << 16 | src[i + 3] << 24;\n    } else {\n      codepoint = src[i + 3] | src[i + 2] << 8 | src[i + 1] << 16 | src[i] << 24;\n    }\n    offset = _writeCodepoint(dst, offset, codepoint, badChar);\n  }\n\n  // Keep overflowing bytes.\n  for (; i < src.length; i++) {\n    overflow.push(src[i]);\n  }\n  return dst.slice(0, offset).toString('ucs2');\n};\nfunction _writeCodepoint(dst, offset, codepoint, badChar) {\n  // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.\n  if (codepoint < 0 || codepoint > 0x10FFFF) {\n    // Not a valid Unicode codepoint\n    codepoint = badChar;\n  }\n\n  // Ephemeral Planes: Write high surrogate.\n  if (codepoint >= 0x10000) {\n    codepoint -= 0x10000;\n    var high = 0xD800 | codepoint >> 10;\n    dst[offset++] = high & 0xff;\n    dst[offset++] = high >> 8;\n\n    // Low surrogate is written below.\n    var codepoint = 0xDC00 | codepoint & 0x3FF;\n  }\n\n  // Write BMP char or low surrogate.\n  dst[offset++] = codepoint & 0xff;\n  dst[offset++] = codepoint >> 8;\n  return offset;\n}\n;\nUtf32Decoder.prototype.end = function () {\n  this.overflow.length = 0;\n};\n\n// == UTF-32 Auto codec =============================================================\n// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.\n// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32\n// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});\n\n// Encoder prepends BOM (which can be overridden with (addBOM: false}).\n\nexports.utf32 = Utf32AutoCodec;\nexports.ucs4 = 'utf32';\nfunction Utf32AutoCodec(options, iconv) {\n  this.iconv = iconv;\n}\nUtf32AutoCodec.prototype.encoder = Utf32AutoEncoder;\nUtf32AutoCodec.prototype.decoder = Utf32AutoDecoder;\n\n// -- Encoding\n\nfunction Utf32AutoEncoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) options.addBOM = true;\n  this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);\n}\nUtf32AutoEncoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\nUtf32AutoEncoder.prototype.end = function () {\n  return this.encoder.end();\n};\n\n// -- Decoding\n\nfunction Utf32AutoDecoder(options, codec) {\n  this.decoder = null;\n  this.initialBufs = [];\n  this.initialBufsLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\nUtf32AutoDecoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBufs.push(buf);\n    this.initialBufsLen += buf.length;\n    if (this.initialBufsLen < 32)\n      // We need more bytes to use space heuristic (see below)\n      return '';\n\n    // We have enough bytes -> detect endianness.\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = '';\n    for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n  return this.decoder.write(buf);\n};\nUtf32AutoDecoder.prototype.end = function () {\n  if (!this.decoder) {\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = '';\n    for (var i = 0; i < this.initialBufs.length; i++) resStr += this.decoder.write(this.initialBufs[i]);\n    var trail = this.decoder.end();\n    if (trail) resStr += trail;\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n  return this.decoder.end();\n};\nfunction detectEncoding(bufs, defaultEncoding) {\n  var b = [];\n  var charsProcessed = 0;\n  var invalidLE = 0,\n    invalidBE = 0; // Number of invalid chars when decoded as LE or BE.\n  var bmpCharsLE = 0,\n    bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.\n\n  outer_loop: for (var i = 0; i < bufs.length; i++) {\n    var buf = bufs[i];\n    for (var j = 0; j < buf.length; j++) {\n      b.push(buf[j]);\n      if (b.length === 4) {\n        if (charsProcessed === 0) {\n          // Check BOM first.\n          if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {\n            return 'utf-32le';\n          }\n          if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {\n            return 'utf-32be';\n          }\n        }\n        if (b[0] !== 0 || b[1] > 0x10) invalidBE++;\n        if (b[3] !== 0 || b[2] > 0x10) invalidLE++;\n        if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;\n        if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;\n        b.length = 0;\n        charsProcessed++;\n        if (charsProcessed >= 100) {\n          break outer_loop;\n        }\n      }\n    }\n  }\n\n  // Make decisions.\n  if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE) return 'utf-32be';\n  if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE) return 'utf-32le';\n\n  // Couldn't decide (likely all zeros or not enough data).\n  return defaultEncoding || 'utf-32le';\n}","map":{"version":3,"names":["Buffer","require","exports","_utf32","Utf32Codec","codecOptions","iconv","bomAware","isLE","utf32le","type","utf32be","ucs4le","ucs4be","prototype","encoder","Utf32Encoder","decoder","Utf32Decoder","options","codec","highSurrogate","write","str","src","from","dst","alloc","length","write32","writeUInt32LE","writeUInt32BE","offset","i","code","readUInt16LE","isHighSurrogate","isLowSurrogate","call","codepoint","slice","end","buf","badChar","defaultCharUnicode","charCodeAt","overflow","push","_writeCodepoint","toString","high","utf32","Utf32AutoCodec","ucs4","Utf32AutoEncoder","Utf32AutoDecoder","addBOM","undefined","getEncoder","defaultEncoding","initialBufs","initialBufsLen","encoding","detectEncoding","getDecoder","resStr","trail","bufs","b","charsProcessed","invalidLE","invalidBE","bmpCharsLE","bmpCharsBE","outer_loop","j"],"sources":["C:/Users/Levi/Documents/szakdoga/vizsgaremek/node_modules/iconv-lite/encodings/utf32.js"],"sourcesContent":["'use strict';\n\nvar Buffer = require('safer-buffer').Buffer;\n\n// == UTF32-LE/BE codec. ==========================================================\n\nexports._utf32 = Utf32Codec;\n\nfunction Utf32Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n    this.bomAware = true;\n    this.isLE = codecOptions.isLE;\n}\n\nexports.utf32le = { type: '_utf32', isLE: true };\nexports.utf32be = { type: '_utf32', isLE: false };\n\n// Aliases\nexports.ucs4le = 'utf32le';\nexports.ucs4be = 'utf32be';\n\nUtf32Codec.prototype.encoder = Utf32Encoder;\nUtf32Codec.prototype.decoder = Utf32Decoder;\n\n// -- Encoding\n\nfunction Utf32Encoder(options, codec) {\n    this.isLE = codec.isLE;\n    this.highSurrogate = 0;\n}\n\nUtf32Encoder.prototype.write = function(str) {\n    var src = Buffer.from(str, 'ucs2');\n    var dst = Buffer.alloc(src.length * 2);\n    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;\n    var offset = 0;\n\n    for (var i = 0; i < src.length; i += 2) {\n        var code = src.readUInt16LE(i);\n        var isHighSurrogate = (0xD800 <= code && code < 0xDC00);\n        var isLowSurrogate = (0xDC00 <= code && code < 0xE000);\n\n        if (this.highSurrogate) {\n            if (isHighSurrogate || !isLowSurrogate) {\n                // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low\n                // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character\n                // (technically wrong, but expected by some applications, like Windows file names).\n                write32.call(dst, this.highSurrogate, offset);\n                offset += 4;\n            }\n            else {\n                // Create 32-bit value from high and low surrogates;\n                var codepoint = (((this.highSurrogate - 0xD800) << 10) | (code - 0xDC00)) + 0x10000;\n\n                write32.call(dst, codepoint, offset);\n                offset += 4;\n                this.highSurrogate = 0;\n\n                continue;\n            }\n        }\n\n        if (isHighSurrogate)\n            this.highSurrogate = code;\n        else {\n            // Even if the current character is a low surrogate, with no previous high surrogate, we'll\n            // encode it as a semi-invalid stand-alone character for the same reasons expressed above for\n            // unpaired high surrogates.\n            write32.call(dst, code, offset);\n            offset += 4;\n            this.highSurrogate = 0;\n        }\n    }\n\n    if (offset < dst.length)\n        dst = dst.slice(0, offset);\n\n    return dst;\n};\n\nUtf32Encoder.prototype.end = function() {\n    // Treat any leftover high surrogate as a semi-valid independent character.\n    if (!this.highSurrogate)\n        return;\n\n    var buf = Buffer.alloc(4);\n\n    if (this.isLE)\n        buf.writeUInt32LE(this.highSurrogate, 0);\n    else\n        buf.writeUInt32BE(this.highSurrogate, 0);\n\n    this.highSurrogate = 0;\n\n    return buf;\n};\n\n// -- Decoding\n\nfunction Utf32Decoder(options, codec) {\n    this.isLE = codec.isLE;\n    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);\n    this.overflow = [];\n}\n\nUtf32Decoder.prototype.write = function(src) {\n    if (src.length === 0)\n        return '';\n\n    var i = 0;\n    var codepoint = 0;\n    var dst = Buffer.alloc(src.length + 4);\n    var offset = 0;\n    var isLE = this.isLE;\n    var overflow = this.overflow;\n    var badChar = this.badChar;\n\n    if (overflow.length > 0) {\n        for (; i < src.length && overflow.length < 4; i++)\n            overflow.push(src[i]);\n        \n        if (overflow.length === 4) {\n            // NOTE: codepoint is a signed int32 and can be negative.\n            // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).\n            if (isLE) {\n                codepoint = overflow[i] | (overflow[i+1] << 8) | (overflow[i+2] << 16) | (overflow[i+3] << 24);\n            } else {\n                codepoint = overflow[i+3] | (overflow[i+2] << 8) | (overflow[i+1] << 16) | (overflow[i] << 24);\n            }\n            overflow.length = 0;\n\n            offset = _writeCodepoint(dst, offset, codepoint, badChar);\n        }\n    }\n\n    // Main loop. Should be as optimized as possible.\n    for (; i < src.length - 3; i += 4) {\n        // NOTE: codepoint is a signed int32 and can be negative.\n        if (isLE) {\n            codepoint = src[i] | (src[i+1] << 8) | (src[i+2] << 16) | (src[i+3] << 24);\n        } else {\n            codepoint = src[i+3] | (src[i+2] << 8) | (src[i+1] << 16) | (src[i] << 24);\n        }\n        offset = _writeCodepoint(dst, offset, codepoint, badChar);\n    }\n\n    // Keep overflowing bytes.\n    for (; i < src.length; i++) {\n        overflow.push(src[i]);\n    }\n\n    return dst.slice(0, offset).toString('ucs2');\n};\n\nfunction _writeCodepoint(dst, offset, codepoint, badChar) {\n    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.\n    if (codepoint < 0 || codepoint > 0x10FFFF) {\n        // Not a valid Unicode codepoint\n        codepoint = badChar;\n    } \n\n    // Ephemeral Planes: Write high surrogate.\n    if (codepoint >= 0x10000) {\n        codepoint -= 0x10000;\n\n        var high = 0xD800 | (codepoint >> 10);\n        dst[offset++] = high & 0xff;\n        dst[offset++] = high >> 8;\n\n        // Low surrogate is written below.\n        var codepoint = 0xDC00 | (codepoint & 0x3FF);\n    }\n\n    // Write BMP char or low surrogate.\n    dst[offset++] = codepoint & 0xff;\n    dst[offset++] = codepoint >> 8;\n\n    return offset;\n};\n\nUtf32Decoder.prototype.end = function() {\n    this.overflow.length = 0;\n};\n\n// == UTF-32 Auto codec =============================================================\n// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.\n// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32\n// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});\n\n// Encoder prepends BOM (which can be overridden with (addBOM: false}).\n\nexports.utf32 = Utf32AutoCodec;\nexports.ucs4 = 'utf32';\n\nfunction Utf32AutoCodec(options, iconv) {\n    this.iconv = iconv;\n}\n\nUtf32AutoCodec.prototype.encoder = Utf32AutoEncoder;\nUtf32AutoCodec.prototype.decoder = Utf32AutoDecoder;\n\n// -- Encoding\n\nfunction Utf32AutoEncoder(options, codec) {\n    options = options || {};\n\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n\n    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);\n}\n\nUtf32AutoEncoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n};\n\nUtf32AutoEncoder.prototype.end = function() {\n    return this.encoder.end();\n};\n\n// -- Decoding\n\nfunction Utf32AutoDecoder(options, codec) {\n    this.decoder = null;\n    this.initialBufs = [];\n    this.initialBufsLen = 0;\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf32AutoDecoder.prototype.write = function(buf) {\n    if (!this.decoder) { \n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBufs.push(buf);\n        this.initialBufsLen += buf.length;\n\n        if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.write(buf);\n};\n\nUtf32AutoDecoder.prototype.end = function() {\n    if (!this.decoder) {\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        var trail = this.decoder.end();\n        if (trail)\n            resStr += trail;\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.end();\n};\n\nfunction detectEncoding(bufs, defaultEncoding) {\n    var b = [];\n    var charsProcessed = 0;\n    var invalidLE = 0, invalidBE = 0;   // Number of invalid chars when decoded as LE or BE.\n    var bmpCharsLE = 0, bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.\n\n    outer_loop:\n    for (var i = 0; i < bufs.length; i++) {\n        var buf = bufs[i];\n        for (var j = 0; j < buf.length; j++) {\n            b.push(buf[j]);\n            if (b.length === 4) {\n                if (charsProcessed === 0) {\n                    // Check BOM first.\n                    if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {\n                        return 'utf-32le';\n                    }\n                    if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {\n                        return 'utf-32be';\n                    }\n                }\n\n                if (b[0] !== 0 || b[1] > 0x10) invalidBE++;\n                if (b[3] !== 0 || b[2] > 0x10) invalidLE++;\n\n                if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;\n                if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;\n\n                b.length = 0;\n                charsProcessed++;\n\n                if (charsProcessed >= 100) {\n                    break outer_loop;\n                }\n            }\n        }\n    }\n\n    // Make decisions.\n    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)  return 'utf-32be';\n    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)  return 'utf-32le';\n\n    // Couldn't decide (likely all zeros or not enough data).\n    return defaultEncoding || 'utf-32le';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}