{"ast":null,"code":"var mysql = require('../');\nvar Connection = require('./Connection');\nvar EventEmitter = require('events').EventEmitter;\nvar Util = require('util');\nvar PoolConnection = require('./PoolConnection');\nmodule.exports = Pool;\nUtil.inherits(Pool, EventEmitter);\nfunction Pool(options) {\n  EventEmitter.call(this);\n  this.config = options.config;\n  this.config.connectionConfig.pool = this;\n  this._acquiringConnections = [];\n  this._allConnections = [];\n  this._freeConnections = [];\n  this._connectionQueue = [];\n  this._closed = false;\n}\nPool.prototype.getConnection = function (cb) {\n  if (this._closed) {\n    var err = new Error('Pool is closed.');\n    err.code = 'POOL_CLOSED';\n    process.nextTick(function () {\n      cb(err);\n    });\n    return;\n  }\n  var connection;\n  var pool = this;\n  if (this._freeConnections.length > 0) {\n    connection = this._freeConnections.shift();\n    this.acquireConnection(connection, cb);\n    return;\n  }\n  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n    connection = new PoolConnection(this, {\n      config: this.config.newConnectionConfig()\n    });\n    this._acquiringConnections.push(connection);\n    this._allConnections.push(connection);\n    connection.connect({\n      timeout: this.config.acquireTimeout\n    }, function onConnect(err) {\n      spliceConnection(pool._acquiringConnections, connection);\n      if (pool._closed) {\n        err = new Error('Pool is closed.');\n        err.code = 'POOL_CLOSED';\n      }\n      if (err) {\n        pool._purgeConnection(connection);\n        cb(err);\n        return;\n      }\n      pool.emit('connection', connection);\n      pool.emit('acquire', connection);\n      cb(null, connection);\n    });\n    return;\n  }\n  if (!this.config.waitForConnections) {\n    process.nextTick(function () {\n      var err = new Error('No connections available.');\n      err.code = 'POOL_CONNLIMIT';\n      cb(err);\n    });\n    return;\n  }\n  this._enqueueCallback(cb);\n};\nPool.prototype.acquireConnection = function acquireConnection(connection, cb) {\n  if (connection._pool !== this) {\n    throw new Error('Connection acquired from wrong pool.');\n  }\n  var changeUser = this._needsChangeUser(connection);\n  var pool = this;\n  this._acquiringConnections.push(connection);\n  function onOperationComplete(err) {\n    spliceConnection(pool._acquiringConnections, connection);\n    if (pool._closed) {\n      err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n    }\n    if (err) {\n      pool._connectionQueue.unshift(cb);\n      pool._purgeConnection(connection);\n      return;\n    }\n    if (changeUser) {\n      pool.emit('connection', connection);\n    }\n    pool.emit('acquire', connection);\n    cb(null, connection);\n  }\n  if (changeUser) {\n    // restore user back to pool configuration\n    connection.config = this.config.newConnectionConfig();\n    connection.changeUser({\n      timeout: this.config.acquireTimeout\n    }, onOperationComplete);\n  } else {\n    // ping connection\n    connection.ping({\n      timeout: this.config.acquireTimeout\n    }, onOperationComplete);\n  }\n};\nPool.prototype.releaseConnection = function releaseConnection(connection) {\n  if (this._acquiringConnections.indexOf(connection) !== -1) {\n    // connection is being acquired\n    return;\n  }\n  if (connection._pool) {\n    if (connection._pool !== this) {\n      throw new Error('Connection released to wrong pool');\n    }\n    if (this._freeConnections.indexOf(connection) !== -1) {\n      // connection already in free connection pool\n      // this won't catch all double-release cases\n      throw new Error('Connection already released');\n    } else {\n      // add connection to end of free queue\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n  if (this._closed) {\n    // empty the connection queue\n    this._connectionQueue.splice(0).forEach(function (cb) {\n      var err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n      process.nextTick(function () {\n        cb(err);\n      });\n    });\n  } else if (this._connectionQueue.length) {\n    // get connection with next waiting callback\n    this.getConnection(this._connectionQueue.shift());\n  }\n};\nPool.prototype.end = function (cb) {\n  this._closed = true;\n  if (typeof cb !== 'function') {\n    cb = function (err) {\n      if (err) throw err;\n    };\n  }\n  var calledBack = false;\n  var waitingClose = 0;\n  function onEnd(err) {\n    if (!calledBack && (err || --waitingClose <= 0)) {\n      calledBack = true;\n      cb(err);\n    }\n  }\n  while (this._allConnections.length !== 0) {\n    waitingClose++;\n    this._purgeConnection(this._allConnections[0], onEnd);\n  }\n  if (waitingClose === 0) {\n    process.nextTick(onEnd);\n  }\n};\nPool.prototype.query = function (sql, values, cb) {\n  var query = Connection.createQuery(sql, values, cb);\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = this.config.connectionConfig.typeCast;\n  }\n  if (this.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n  this.getConnection(function (err, conn) {\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    }\n\n    // Release connection based off event\n    query.once('end', function () {\n      conn.release();\n    });\n    conn.query(query);\n  });\n  return query;\n};\nPool.prototype._enqueueCallback = function _enqueueCallback(callback) {\n  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n    process.nextTick(function () {\n      var err = new Error('Queue limit reached.');\n      err.code = 'POOL_ENQUEUELIMIT';\n      callback(err);\n    });\n    return;\n  }\n\n  // Bind to domain, as dequeue will likely occur in a different domain\n  var cb = process.domain ? process.domain.bind(callback) : callback;\n  this._connectionQueue.push(cb);\n  this.emit('enqueue');\n};\nPool.prototype._needsChangeUser = function _needsChangeUser(connection) {\n  var connConfig = connection.config;\n  var poolConfig = this.config.connectionConfig;\n\n  // check if changeUser values are different\n  return connConfig.user !== poolConfig.user || connConfig.database !== poolConfig.database || connConfig.password !== poolConfig.password || connConfig.charsetNumber !== poolConfig.charsetNumber;\n};\nPool.prototype._purgeConnection = function _purgeConnection(connection, callback) {\n  var cb = callback || function () {};\n  if (connection.state === 'disconnected') {\n    connection.destroy();\n  }\n  this._removeConnection(connection);\n  if (connection.state !== 'disconnected' && !connection._protocol._quitSequence) {\n    connection._realEnd(cb);\n    return;\n  }\n  process.nextTick(cb);\n};\nPool.prototype._removeConnection = function (connection) {\n  connection._pool = null;\n\n  // Remove connection from all connections\n  spliceConnection(this._allConnections, connection);\n\n  // Remove connection from free connections\n  spliceConnection(this._freeConnections, connection);\n  this.releaseConnection(connection);\n};\nPool.prototype.escape = function (value) {\n  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n};\nPool.prototype.escapeId = function escapeId(value) {\n  return mysql.escapeId(value, false);\n};\nfunction spliceConnection(array, connection) {\n  var index;\n  if ((index = array.indexOf(connection)) !== -1) {\n    // Remove connection from all connections\n    array.splice(index, 1);\n  }\n}","map":{"version":3,"names":["mysql","require","Connection","EventEmitter","Util","PoolConnection","module","exports","Pool","inherits","options","call","config","connectionConfig","pool","_acquiringConnections","_allConnections","_freeConnections","_connectionQueue","_closed","prototype","getConnection","cb","err","Error","code","process","nextTick","connection","length","shift","acquireConnection","connectionLimit","newConnectionConfig","push","connect","timeout","acquireTimeout","onConnect","spliceConnection","_purgeConnection","emit","waitForConnections","_enqueueCallback","_pool","changeUser","_needsChangeUser","onOperationComplete","unshift","ping","releaseConnection","indexOf","splice","forEach","end","calledBack","waitingClose","onEnd","query","sql","values","createQuery","typeCast","trace","_callSite","conn","on","once","release","callback","queueLimit","domain","bind","connConfig","poolConfig","user","database","password","charsetNumber","state","destroy","_removeConnection","_protocol","_quitSequence","_realEnd","escape","value","stringifyObjects","timezone","escapeId","array","index"],"sources":["D:/BNH/vizsgaremek/node_modules/mysql/lib/Pool.js"],"sourcesContent":["var mysql          = require('../');\nvar Connection     = require('./Connection');\nvar EventEmitter   = require('events').EventEmitter;\nvar Util           = require('util');\nvar PoolConnection = require('./PoolConnection');\n\nmodule.exports = Pool;\n\nUtil.inherits(Pool, EventEmitter);\nfunction Pool(options) {\n  EventEmitter.call(this);\n  this.config = options.config;\n  this.config.connectionConfig.pool = this;\n\n  this._acquiringConnections = [];\n  this._allConnections       = [];\n  this._freeConnections      = [];\n  this._connectionQueue      = [];\n  this._closed               = false;\n}\n\nPool.prototype.getConnection = function (cb) {\n\n  if (this._closed) {\n    var err = new Error('Pool is closed.');\n    err.code = 'POOL_CLOSED';\n    process.nextTick(function () {\n      cb(err);\n    });\n    return;\n  }\n\n  var connection;\n  var pool = this;\n\n  if (this._freeConnections.length > 0) {\n    connection = this._freeConnections.shift();\n    this.acquireConnection(connection, cb);\n    return;\n  }\n\n  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n    connection = new PoolConnection(this, { config: this.config.newConnectionConfig() });\n\n    this._acquiringConnections.push(connection);\n    this._allConnections.push(connection);\n\n    connection.connect({timeout: this.config.acquireTimeout}, function onConnect(err) {\n      spliceConnection(pool._acquiringConnections, connection);\n\n      if (pool._closed) {\n        err = new Error('Pool is closed.');\n        err.code = 'POOL_CLOSED';\n      }\n\n      if (err) {\n        pool._purgeConnection(connection);\n        cb(err);\n        return;\n      }\n\n      pool.emit('connection', connection);\n      pool.emit('acquire', connection);\n      cb(null, connection);\n    });\n    return;\n  }\n\n  if (!this.config.waitForConnections) {\n    process.nextTick(function(){\n      var err = new Error('No connections available.');\n      err.code = 'POOL_CONNLIMIT';\n      cb(err);\n    });\n    return;\n  }\n\n  this._enqueueCallback(cb);\n};\n\nPool.prototype.acquireConnection = function acquireConnection(connection, cb) {\n  if (connection._pool !== this) {\n    throw new Error('Connection acquired from wrong pool.');\n  }\n\n  var changeUser = this._needsChangeUser(connection);\n  var pool       = this;\n\n  this._acquiringConnections.push(connection);\n\n  function onOperationComplete(err) {\n    spliceConnection(pool._acquiringConnections, connection);\n\n    if (pool._closed) {\n      err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n    }\n\n    if (err) {\n      pool._connectionQueue.unshift(cb);\n      pool._purgeConnection(connection);\n      return;\n    }\n\n    if (changeUser) {\n      pool.emit('connection', connection);\n    }\n\n    pool.emit('acquire', connection);\n    cb(null, connection);\n  }\n\n  if (changeUser) {\n    // restore user back to pool configuration\n    connection.config = this.config.newConnectionConfig();\n    connection.changeUser({timeout: this.config.acquireTimeout}, onOperationComplete);\n  } else {\n    // ping connection\n    connection.ping({timeout: this.config.acquireTimeout}, onOperationComplete);\n  }\n};\n\nPool.prototype.releaseConnection = function releaseConnection(connection) {\n\n  if (this._acquiringConnections.indexOf(connection) !== -1) {\n    // connection is being acquired\n    return;\n  }\n\n  if (connection._pool) {\n    if (connection._pool !== this) {\n      throw new Error('Connection released to wrong pool');\n    }\n\n    if (this._freeConnections.indexOf(connection) !== -1) {\n      // connection already in free connection pool\n      // this won't catch all double-release cases\n      throw new Error('Connection already released');\n    } else {\n      // add connection to end of free queue\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n\n  if (this._closed) {\n    // empty the connection queue\n    this._connectionQueue.splice(0).forEach(function (cb) {\n      var err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n      process.nextTick(function () {\n        cb(err);\n      });\n    });\n  } else if (this._connectionQueue.length) {\n    // get connection with next waiting callback\n    this.getConnection(this._connectionQueue.shift());\n  }\n};\n\nPool.prototype.end = function (cb) {\n  this._closed = true;\n\n  if (typeof cb !== 'function') {\n    cb = function (err) {\n      if (err) throw err;\n    };\n  }\n\n  var calledBack   = false;\n  var waitingClose = 0;\n\n  function onEnd(err) {\n    if (!calledBack && (err || --waitingClose <= 0)) {\n      calledBack = true;\n      cb(err);\n    }\n  }\n\n  while (this._allConnections.length !== 0) {\n    waitingClose++;\n    this._purgeConnection(this._allConnections[0], onEnd);\n  }\n\n  if (waitingClose === 0) {\n    process.nextTick(onEnd);\n  }\n};\n\nPool.prototype.query = function (sql, values, cb) {\n  var query = Connection.createQuery(sql, values, cb);\n\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = this.config.connectionConfig.typeCast;\n  }\n\n  if (this.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n\n  this.getConnection(function (err, conn) {\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    }\n\n    // Release connection based off event\n    query.once('end', function() {\n      conn.release();\n    });\n\n    conn.query(query);\n  });\n\n  return query;\n};\n\nPool.prototype._enqueueCallback = function _enqueueCallback(callback) {\n\n  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n    process.nextTick(function () {\n      var err = new Error('Queue limit reached.');\n      err.code = 'POOL_ENQUEUELIMIT';\n      callback(err);\n    });\n    return;\n  }\n\n  // Bind to domain, as dequeue will likely occur in a different domain\n  var cb = process.domain\n    ? process.domain.bind(callback)\n    : callback;\n\n  this._connectionQueue.push(cb);\n  this.emit('enqueue');\n};\n\nPool.prototype._needsChangeUser = function _needsChangeUser(connection) {\n  var connConfig = connection.config;\n  var poolConfig = this.config.connectionConfig;\n\n  // check if changeUser values are different\n  return connConfig.user !== poolConfig.user\n    || connConfig.database !== poolConfig.database\n    || connConfig.password !== poolConfig.password\n    || connConfig.charsetNumber !== poolConfig.charsetNumber;\n};\n\nPool.prototype._purgeConnection = function _purgeConnection(connection, callback) {\n  var cb = callback || function () {};\n\n  if (connection.state === 'disconnected') {\n    connection.destroy();\n  }\n\n  this._removeConnection(connection);\n\n  if (connection.state !== 'disconnected' && !connection._protocol._quitSequence) {\n    connection._realEnd(cb);\n    return;\n  }\n\n  process.nextTick(cb);\n};\n\nPool.prototype._removeConnection = function(connection) {\n  connection._pool = null;\n\n  // Remove connection from all connections\n  spliceConnection(this._allConnections, connection);\n\n  // Remove connection from free connections\n  spliceConnection(this._freeConnections, connection);\n\n  this.releaseConnection(connection);\n};\n\nPool.prototype.escape = function(value) {\n  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n};\n\nPool.prototype.escapeId = function escapeId(value) {\n  return mysql.escapeId(value, false);\n};\n\nfunction spliceConnection(array, connection) {\n  var index;\n  if ((index = array.indexOf(connection)) !== -1) {\n    // Remove connection from all connections\n    array.splice(index, 1);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}