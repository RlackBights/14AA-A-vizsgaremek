{"ast":null,"code":"var Types = require('../constants/types');\nvar Charsets = require('../constants/charsets');\nvar Field = require('./Field');\nvar IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);\nmodule.exports = RowDataPacket;\nfunction RowDataPacket() {}\nObject.defineProperty(RowDataPacket.prototype, 'parse', {\n  configurable: true,\n  enumerable: false,\n  value: parse\n});\nObject.defineProperty(RowDataPacket.prototype, '_typeCast', {\n  configurable: true,\n  enumerable: false,\n  value: typeCast\n});\nfunction parse(parser, fieldPackets, typeCast, nestTables, connection) {\n  var self = this;\n  var next = function () {\n    return self._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings);\n  };\n  for (var i = 0; i < fieldPackets.length; i++) {\n    var fieldPacket = fieldPackets[i];\n    var value;\n    if (typeof typeCast === 'function') {\n      value = typeCast.apply(connection, [new Field({\n        packet: fieldPacket,\n        parser: parser\n      }), next]);\n    } else {\n      value = typeCast ? this._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings) : fieldPacket.charsetNr === Charsets.BINARY ? parser.parseLengthCodedBuffer() : parser.parseLengthCodedString();\n    }\n    if (typeof nestTables === 'string' && nestTables.length) {\n      this[fieldPacket.table + nestTables + fieldPacket.name] = value;\n    } else if (nestTables) {\n      this[fieldPacket.table] = this[fieldPacket.table] || {};\n      this[fieldPacket.table][fieldPacket.name] = value;\n    } else {\n      this[fieldPacket.name] = value;\n    }\n  }\n}\nfunction typeCast(field, parser, timeZone, supportBigNumbers, bigNumberStrings, dateStrings) {\n  var numberString;\n  switch (field.type) {\n    case Types.TIMESTAMP:\n    case Types.TIMESTAMP2:\n    case Types.DATE:\n    case Types.DATETIME:\n    case Types.DATETIME2:\n    case Types.NEWDATE:\n      var dateString = parser.parseLengthCodedString();\n      if (typeMatch(field.type, dateStrings)) {\n        return dateString;\n      }\n      if (dateString === null) {\n        return null;\n      }\n      var originalString = dateString;\n      if (field.type === Types.DATE) {\n        dateString += ' 00:00:00';\n      }\n      if (timeZone !== 'local') {\n        dateString += ' ' + timeZone;\n      }\n      var dt = new Date(dateString);\n      if (isNaN(dt.getTime())) {\n        return originalString;\n      }\n      return dt;\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      numberString = parser.parseLengthCodedString();\n      return numberString === null || field.zeroFill && numberString[0] === '0' ? numberString : Number(numberString);\n    case Types.NEWDECIMAL:\n    case Types.LONGLONG:\n      numberString = parser.parseLengthCodedString();\n      return numberString === null || field.zeroFill && numberString[0] === '0' ? numberString : supportBigNumbers && (bigNumberStrings || Number(numberString) >= IEEE_754_BINARY_64_PRECISION || Number(numberString) <= -IEEE_754_BINARY_64_PRECISION) ? numberString : Number(numberString);\n    case Types.BIT:\n      return parser.parseLengthCodedBuffer();\n    case Types.STRING:\n    case Types.VAR_STRING:\n    case Types.TINY_BLOB:\n    case Types.MEDIUM_BLOB:\n    case Types.LONG_BLOB:\n    case Types.BLOB:\n      return field.charsetNr === Charsets.BINARY ? parser.parseLengthCodedBuffer() : parser.parseLengthCodedString();\n    case Types.GEOMETRY:\n      return parser.parseGeometryValue();\n    default:\n      return parser.parseLengthCodedString();\n  }\n}\nfunction typeMatch(type, list) {\n  if (Array.isArray(list)) {\n    return list.indexOf(Types[type]) !== -1;\n  } else {\n    return Boolean(list);\n  }\n}","map":{"version":3,"names":["Types","require","Charsets","Field","IEEE_754_BINARY_64_PRECISION","Math","pow","module","exports","RowDataPacket","Object","defineProperty","prototype","configurable","enumerable","value","parse","typeCast","parser","fieldPackets","nestTables","connection","self","next","_typeCast","fieldPacket","config","timezone","supportBigNumbers","bigNumberStrings","dateStrings","i","length","apply","packet","charsetNr","BINARY","parseLengthCodedBuffer","parseLengthCodedString","table","name","field","timeZone","numberString","type","TIMESTAMP","TIMESTAMP2","DATE","DATETIME","DATETIME2","NEWDATE","dateString","typeMatch","originalString","dt","Date","isNaN","getTime","TINY","SHORT","LONG","INT24","YEAR","FLOAT","DOUBLE","zeroFill","Number","NEWDECIMAL","LONGLONG","BIT","STRING","VAR_STRING","TINY_BLOB","MEDIUM_BLOB","LONG_BLOB","BLOB","GEOMETRY","parseGeometryValue","list","Array","isArray","indexOf","Boolean"],"sources":["D:/BNH/vizsgaremek/node_modules/mysql/lib/protocol/packets/RowDataPacket.js"],"sourcesContent":["var Types                        = require('../constants/types');\nvar Charsets                     = require('../constants/charsets');\nvar Field                        = require('./Field');\nvar IEEE_754_BINARY_64_PRECISION = Math.pow(2, 53);\n\nmodule.exports = RowDataPacket;\nfunction RowDataPacket() {\n}\n\nObject.defineProperty(RowDataPacket.prototype, 'parse', {\n  configurable : true,\n  enumerable   : false,\n  value        : parse\n});\n\nObject.defineProperty(RowDataPacket.prototype, '_typeCast', {\n  configurable : true,\n  enumerable   : false,\n  value        : typeCast\n});\n\nfunction parse(parser, fieldPackets, typeCast, nestTables, connection) {\n  var self = this;\n  var next = function () {\n    return self._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings);\n  };\n\n  for (var i = 0; i < fieldPackets.length; i++) {\n    var fieldPacket = fieldPackets[i];\n    var value;\n\n    if (typeof typeCast === 'function') {\n      value = typeCast.apply(connection, [ new Field({ packet: fieldPacket, parser: parser }), next ]);\n    } else {\n      value = (typeCast)\n        ? this._typeCast(fieldPacket, parser, connection.config.timezone, connection.config.supportBigNumbers, connection.config.bigNumberStrings, connection.config.dateStrings)\n        : ( (fieldPacket.charsetNr === Charsets.BINARY)\n          ? parser.parseLengthCodedBuffer()\n          : parser.parseLengthCodedString() );\n    }\n\n    if (typeof nestTables === 'string' && nestTables.length) {\n      this[fieldPacket.table + nestTables + fieldPacket.name] = value;\n    } else if (nestTables) {\n      this[fieldPacket.table] = this[fieldPacket.table] || {};\n      this[fieldPacket.table][fieldPacket.name] = value;\n    } else {\n      this[fieldPacket.name] = value;\n    }\n  }\n}\n\nfunction typeCast(field, parser, timeZone, supportBigNumbers, bigNumberStrings, dateStrings) {\n  var numberString;\n\n  switch (field.type) {\n    case Types.TIMESTAMP:\n    case Types.TIMESTAMP2:\n    case Types.DATE:\n    case Types.DATETIME:\n    case Types.DATETIME2:\n    case Types.NEWDATE:\n      var dateString = parser.parseLengthCodedString();\n\n      if (typeMatch(field.type, dateStrings)) {\n        return dateString;\n      }\n\n      if (dateString === null) {\n        return null;\n      }\n\n      var originalString = dateString;\n      if (field.type === Types.DATE) {\n        dateString += ' 00:00:00';\n      }\n\n      if (timeZone !== 'local') {\n        dateString += ' ' + timeZone;\n      }\n\n      var dt = new Date(dateString);\n      if (isNaN(dt.getTime())) {\n        return originalString;\n      }\n\n      return dt;\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      numberString = parser.parseLengthCodedString();\n      return (numberString === null || (field.zeroFill && numberString[0] === '0'))\n        ? numberString : Number(numberString);\n    case Types.NEWDECIMAL:\n    case Types.LONGLONG:\n      numberString = parser.parseLengthCodedString();\n      return (numberString === null || (field.zeroFill && numberString[0] === '0'))\n        ? numberString\n        : ((supportBigNumbers && (bigNumberStrings || (Number(numberString) >= IEEE_754_BINARY_64_PRECISION) || Number(numberString) <= -IEEE_754_BINARY_64_PRECISION))\n          ? numberString\n          : Number(numberString));\n    case Types.BIT:\n      return parser.parseLengthCodedBuffer();\n    case Types.STRING:\n    case Types.VAR_STRING:\n    case Types.TINY_BLOB:\n    case Types.MEDIUM_BLOB:\n    case Types.LONG_BLOB:\n    case Types.BLOB:\n      return (field.charsetNr === Charsets.BINARY)\n        ? parser.parseLengthCodedBuffer()\n        : parser.parseLengthCodedString();\n    case Types.GEOMETRY:\n      return parser.parseGeometryValue();\n    default:\n      return parser.parseLengthCodedString();\n  }\n}\n\nfunction typeMatch(type, list) {\n  if (Array.isArray(list)) {\n    return list.indexOf(Types[type]) !== -1;\n  } else {\n    return Boolean(list);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}