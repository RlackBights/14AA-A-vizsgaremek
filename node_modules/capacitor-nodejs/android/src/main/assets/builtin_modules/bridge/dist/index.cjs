'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var events = require('events');
var process = require('process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var process__default = /*#__PURE__*/_interopDefaultLegacy(process);

class ChannelMessageCodec {
    static serialize(payload) {
        const eventName = payload.eventName;
        const args = payload.args;
        const eventMessage = JSON.stringify(args);
        const data = {
            eventName,
            eventMessage
        };
        const channelMessage = JSON.stringify(data);
        return channelMessage;
    }
    static deserialize(channelMessage) {
        const data = JSON.parse(channelMessage);
        const eventName = data.eventName;
        const eventMessage = data.eventMessage;
        let args = [];
        if (eventMessage) {
            args = JSON.parse(eventMessage);
        }
        const payload = {
            eventName,
            args
        };
        return payload;
    }
}

class NativeMobileBridge {
    constructor() {
        this.mobileBridge = process__default["default"]._linkedBinding('nativeBridge');
    }
    emit(args) {
        this.mobileBridge.emit(args.channelName, args.channelMessage);
    }
    registerChannel(channelName, callback) {
        this.mobileBridge.registerChannel(channelName, (channelName, channelMessage) => {
            callback({ channelName, channelMessage });
        });
    }
}
class NativeDesktopBridge {
    emit(args) {
        if (!process__default["default"].send) {
            throw new Error('No IPC channel has been established between the Node.js process and the Capacitor layer.');
        }
        process__default["default"].send(args);
    }
    registerChannel(channelName, callback) {
        process__default["default"].on('message', (args) => {
            if (args.channelName === channelName) {
                callback(args);
            }
        });
    }
}
const platform = process__default["default"].platform;
const isMobilePlatform = platform === 'android' || platform === 'ios';
const nativeBridge = isMobilePlatform
    ? new NativeMobileBridge()
    : new NativeDesktopBridge();
class Channel extends events.EventEmitter {
    constructor(channelName) {
        super();
        this.channelName = channelName;
        const self = this;
        nativeBridge.registerChannel(channelName, args => {
            const channelMessage = args.channelMessage;
            const payload = ChannelMessageCodec.deserialize(channelMessage);
            self.emitWrapper(payload.eventName, ...payload.args);
        });
    }
    /**
     * Sends a message to the Capacitor layer via eventName, along with arguments.
     * Arguments will be serialized with JSON.
     *
     * @param eventName The name of the event being send to.
     * @param args The Array of arguments to send.
     */
    send(eventName, ...args) {
        if (eventName === undefined || eventName === '') {
            throw new Error("Required parameter 'eventName' was not specified");
        }
        const payload = { eventName, args };
        const channelName = this.channelName;
        const channelMessage = ChannelMessageCodec.serialize(payload);
        const channelPayload = {
            channelName,
            channelMessage
        };
        nativeBridge.emit(channelPayload);
    }
    emitWrapper(eventName, ...args) {
        const self = this;
        setImmediate(() => {
            self.emit(eventName, ...args);
        });
    }
    /**
     * Listens to `eventName` and calls `listener(args...)` when a new message arrives from the Capacitor layer.
     */
    on(eventName, listener) {
        return super.on(eventName, listener);
    }
    /**
     * Listens one time to `eventName` and calls `listener(args...)` when a new message
     * arrives from the Capacitor layer, after which it is removed.
     */
    once(eventName, listener) {
        return super.once(eventName, listener);
    }
    /**
     * Alias for `channel.on(eventName, listener)`.
     */
    addListener(eventName, listener) {
        return super.once(eventName, listener);
    }
    /**
     * Removes the specified `listener` from the listener array for the specified `eventName`.
     */
    removeListener(eventName, listener) {
        return super.removeListener(eventName, listener);
    }
    /**
     * Removes all listeners, or those of the specified `eventName`.
     *
     * @param eventName The name of the event all listeners will be removed from.
     */
    removeAllListeners(eventName) {
        return super.removeAllListeners(eventName);
    }
}
const appChannel = new Channel('APP_CHANNEL');
/**
 * Provides a few methods to send messages from the Node.js process to the Capacitor layer,
 * and to receive replies from the Capacitor layer.
 */
const eventChannel = new Channel('EVENT_CHANNEL');
/**
 * Returns a path for a per-user application data directory on each platform,
 * where data can be read and written.
 */
function getDataPath() {
    const path = process__default["default"].env['DATADIR'];
    if (!path) {
        throw new Error('Unable to get a directory for persistent data storage.');
    }
    return path;
}

appChannel.send('ready');

exports.channel = eventChannel;
exports.getDataPath = getDataPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
