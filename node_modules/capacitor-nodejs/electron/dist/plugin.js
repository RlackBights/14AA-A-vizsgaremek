'use strict';

var require$$1 = require('electron');
var require$$1$1 = require('events');
var require$$2 = require('fs');
var require$$3 = require('path');
var require$$0 = require('child_process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$1);
var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);
var require$$3__default = /*#__PURE__*/_interopDefaultLegacy(require$$3);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var src = {};

var implementation = {};

var utils$1 = {};

Object.defineProperty(utils$1, "__esModule", { value: true });
utils$1.ChannelMessageCodec = void 0;
class ChannelMessageCodec {
    static serialize(payload) {
        const eventName = payload.eventName;
        const args = payload.args;
        const eventMessage = JSON.stringify(args);
        const data = {
            eventName,
            eventMessage
        };
        const channelMessage = JSON.stringify(data);
        return channelMessage;
    }
    static deserialize(channelMessage) {
        const data = JSON.parse(channelMessage);
        const eventName = data.eventName;
        const eventMessage = data.eventMessage;
        let args = [];
        if (eventMessage) {
            args = JSON.parse(eventMessage);
        }
        const payload = {
            eventName,
            args
        };
        return payload;
    }
}
utils$1.ChannelMessageCodec = ChannelMessageCodec;

var utils = {};

Object.defineProperty(utils, "__esModule", { value: true });
utils.joinEnv = void 0;
const path_1 = require$$3__default["default"];
function joinEnv(...variables) {
    let envVariable = '';
    for (let index = 0; index < variables.length; index++) {
        const variable = variables[index];
        if (!variable)
            continue;
        envVariable += variable;
        if (index < variables.length - 1) {
            envVariable += path_1.delimiter;
        }
    }
    return envVariable;
}
utils.joinEnv = joinEnv;

var hasRequiredImplementation;

function requireImplementation () {
	if (hasRequiredImplementation) return implementation;
	hasRequiredImplementation = 1;
	Object.defineProperty(implementation, "__esModule", { value: true });
	implementation.CapacitorNodeJSImplementation = void 0;
	const child_process_1 = require$$0__default["default"];
	const electron_1 = require$$1__default["default"];
	const fs_1 = require$$2__default["default"];
	const path_1 = require$$3__default["default"];
	const utils_1 = utils$1;
	const index_1 = requireSrc();
	const utils_2 = utils;
	class EngineStatus {
	    constructor() {
	        this.whenEngineReadyListeners = [];
	        this.isEngineStarted = false;
	        this.isEngineReady = false;
	    }
	    setStarted() {
	        this.isEngineStarted = true;
	    }
	    isStarted() {
	        return this.isEngineStarted;
	    }
	    setReady() {
	        this.isEngineReady = true;
	        while (this.whenEngineReadyListeners.length > 0) {
	            const whenEngineReadyListener = this.whenEngineReadyListeners[0];
	            whenEngineReadyListener();
	            this.whenEngineReadyListeners.splice(0, 1);
	        }
	    }
	    isReady() {
	        return this.isEngineReady;
	    }
	    whenReady(callback) {
	        if (this.isReady()) {
	            callback();
	        }
	        else {
	            this.whenEngineReadyListeners.push(callback);
	        }
	    }
	}
	class CapacitorNodeJSImplementation {
	    constructor(eventNotifier) {
	        this.engineStatus = new EngineStatus();
	        this.eventNotifier = eventNotifier;
	    }
	    async startEngine(projectDir, mainFile, args, env) {
	        if (this.engineStatus.isStarted()) {
	            throw new Error('The Node.js engine has already been started.');
	        }
	        this.engineStatus.setStarted();
	        const projectPath = path_1.join(electron_1.app.getAppPath(), 'app', projectDir);
	        const modulesPath = path_1.join(__dirname, '..', 'assets', 'builtin_modules');
	        const dataPath = electron_1.app.getPath('userData');
	        if (!fs_1.existsSync(projectPath)) {
	            throw new Error('Unable to access the Node.js project. (No such directory)');
	        }
	        const projectPackageJsonPath = path_1.join(projectPath, 'package.json');
	        let projectMainFile = 'index.js';
	        if (mainFile) {
	            projectMainFile = mainFile;
	        }
	        else if (fs_1.existsSync(projectPackageJsonPath)) {
	            try {
	                const projectPackageJson = await Promise.resolve().then(() => require(projectPackageJsonPath));
	                const projectPackageJsonMainFile = projectPackageJson.main;
	                if (projectPackageJsonMainFile) {
	                    projectMainFile = projectPackageJson.main;
	                }
	            }
	            catch (_a) {
	                throw new Error('Failed to read the package.json file of the Node.js project.');
	            }
	        }
	        const projectMainPath = path_1.join(projectPath, projectMainFile);
	        if (!fs_1.existsSync(projectMainPath)) {
	            throw new Error('Unable to access main script of the Node.js project. (No such file)');
	        }
	        const modulesPaths = utils_2.joinEnv(projectPath, modulesPath);
	        const nodeEnv = Object.assign({ NODE_PATH: modulesPaths, DATADIR: dataPath }, env);
	        const nodeOptions = {
	            env: nodeEnv,
	            serialization: 'json'
	        };
	        this.nodeProcess = child_process_1.fork(projectMainPath, args, nodeOptions);
	        this.nodeProcess.on('message', (args) => {
	            this.receiveMessage(args.channelName, args.channelMessage);
	        });
	    }
	    resolveWhenReady() {
	        return new Promise((resolve, reject) => {
	            if (!this.engineStatus.isStarted()) {
	                reject('The Node.js engine has not been started yet.');
	            }
	            this.engineStatus.whenReady(() => resolve());
	        });
	    }
	    sendMessage(payload) {
	        if (!this.engineStatus.isStarted()) {
	            throw new Error('The Node.js engine has not been started yet.');
	        }
	        if (!this.engineStatus.isReady()) {
	            throw new Error('The Node.js engine is not ready yet.');
	        }
	        if (this.nodeProcess === undefined || !payload.eventName || !payload.args)
	            return;
	        const channelName = index_1.CapacitorNodeJS.CHANNEL_NAME_EVENTS;
	        const channelMessage = utils_1.ChannelMessageCodec.serialize(payload);
	        const channelData = {
	            channelName,
	            channelMessage
	        };
	        this.nodeProcess.send(channelData);
	    }
	    receiveMessage(channelName, channelMessage) {
	        const payload = utils_1.ChannelMessageCodec.deserialize(channelMessage);
	        const eventName = payload.eventName;
	        const args = payload.args;
	        if (channelName === index_1.CapacitorNodeJS.CHANNEL_NAME_APP && eventName === 'ready') {
	            this.engineStatus.setReady();
	        }
	        else if (channelName === index_1.CapacitorNodeJS.CHANNEL_NAME_EVENTS) {
	            this.eventNotifier.channelReceive(eventName, args);
	        }
	    }
	}
	implementation.CapacitorNodeJSImplementation = CapacitorNodeJSImplementation;
	
	return implementation;
}

var hasRequiredSrc;

function requireSrc () {
	if (hasRequiredSrc) return src;
	hasRequiredSrc = 1;
	Object.defineProperty(src, "__esModule", { value: true });
	src.CapacitorNodeJS = void 0;
	const electron_1 = require$$1__default["default"];
	const events_1 = require$$1__default$1["default"];
	const fs_1 = require$$2__default["default"];
	const path_1 = require$$3__default["default"];
	const implementation_1 = requireImplementation();
	class PluginSettings {
	    constructor() {
	        this.nodeDir = 'nodejs';
	        this.startMode = 'auto';
	    }
	}
	class CapacitorNodeJS extends events_1.EventEmitter {
	    constructor( /*config?: Record<string, any>*/) {
	        super();
	        // removeAllListeners() function is missing (https://github.com/capacitor-community/electron/pull/185)
	        //---------------------------------------------------------------------------------------
	        //#endregion
	        //#region PluginEvents
	        //---------------------------------------------------------------------------------------
	        this.PluginEventNotifier = {
	            // Bridge -------------------------------------------------------------------------------
	            channelReceive: (eventName, payloadArray) => {
	                this.notifyChannelListeners(eventName, payloadArray);
	            }
	        };
	        //this.config = config;
	        this.implementation = new implementation_1.CapacitorNodeJSImplementation(this.PluginEventNotifier);
	        this.readPluginSettings().then(pluginSettings => {
	            if (pluginSettings.startMode === 'auto') {
	                this.implementation.startEngine(pluginSettings.nodeDir);
	            }
	        });
	    }
	    async readPluginSettings() {
	        var _a;
	        //!-------------------------- workaround ---------------------------
	        // the configuration exposed by the capacitor-community/electron platform
	        // is always empty for some reason
	        const configPathBase = path_1.join(electron_1.app.getAppPath(), 'capacitor.config.');
	        const configPathExt = fs_1.existsSync(configPathBase + 'json') ? 'json' :
	            fs_1.existsSync(configPathBase + 'js') ? 'js' :
	                fs_1.existsSync(configPathBase + 'ts') ? 'ts' : undefined;
	        const configPath = configPathBase + configPathExt;
	        const configFile = await require(configPath);
	        const capacitorConfig = configFile.default || configFile;
	        const config = (_a = capacitorConfig === null || capacitorConfig === void 0 ? void 0 : capacitorConfig.plugins) === null || _a === void 0 ? void 0 : _a.CapacitorNodeJS;
	        //!-----------------------------------------------------------------
	        const settings = new PluginSettings();
	        settings.nodeDir = (config === null || config === void 0 ? void 0 : config.nodeDir) || settings.nodeDir;
	        settings.startMode = (config === null || config === void 0 ? void 0 : config.startMode) || settings.startMode;
	        return settings;
	    }
	    //#region PluginMethods
	    //---------------------------------------------------------------------------------------
	    async start(args) {
	        var _a;
	        const pluginSettings = await this.readPluginSettings();
	        if (pluginSettings.startMode !== 'manual') {
	            throw new Error('Manual startup of the Node.js engine is not enabled.');
	        }
	        const projectDir = (_a = args === null || args === void 0 ? void 0 : args.nodeDir) !== null && _a !== void 0 ? _a : pluginSettings.nodeDir;
	        const nodeMain = args === null || args === void 0 ? void 0 : args.script;
	        const nodeArgs = args === null || args === void 0 ? void 0 : args.args;
	        const nodeEnv = args === null || args === void 0 ? void 0 : args.env;
	        this.implementation.startEngine(projectDir, nodeMain, nodeArgs, nodeEnv);
	    }
	    async send(args) {
	        const eventName = args.eventName;
	        if (eventName === undefined || eventName === '') {
	            throw new Error("Required parameter 'eventName' was not specified");
	        }
	        if (args.args === undefined) {
	            args.args = [];
	        }
	        this.implementation.sendMessage(args);
	    }
	    async whenReady() {
	        return this.implementation.resolveWhenReady();
	    }
	    //---------------------------------------------------------------------------------------
	    //#endregion
	    //#region PluginListeners
	    //---------------------------------------------------------------------------------------
	    notifyChannelListeners(eventName, payloadArray) {
	        const args = { args: payloadArray };
	        this.emit(eventName, args);
	    }
	}
	src.CapacitorNodeJS = CapacitorNodeJS;
	CapacitorNodeJS.CHANNEL_NAME_APP = 'APP_CHANNEL';
	CapacitorNodeJS.CHANNEL_NAME_EVENTS = 'EVENT_CHANNEL';
	
	return src;
}

var srcExports = requireSrc();
var index = /*@__PURE__*/getDefaultExportFromCjs(srcExports);

module.exports = index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
