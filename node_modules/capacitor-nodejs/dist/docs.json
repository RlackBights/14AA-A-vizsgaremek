{
  "api": {
    "name": "NodeJSInterface",
    "slug": "nodejsinterface",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "start",
        "signature": "(options?: StartOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "StartOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Starts the Node.js engine with properties as set by the `options`.\n\n**Note:** This method is only available if the Node.js engine startup mode was set to `'manual'` via the plugin configuration.",
        "complexTypes": [
          "StartOptions"
        ],
        "slug": "start"
      },
      {
        "name": "send",
        "signature": "(args: ChannelPayloadData) => Promise<void>",
        "parameters": [
          {
            "name": "args",
            "docs": "",
            "type": "ChannelPayloadData"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Sends a message to the Node.js process.",
        "complexTypes": [
          "ChannelPayloadData"
        ],
        "slug": "send"
      },
      {
        "name": "whenReady",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Resolves when the Node.js process is initialized.",
        "complexTypes": [],
        "slug": "whenready"
      },
      {
        "name": "addListener",
        "signature": "(eventName: string, listenerFunc: ChannelListenerCallback) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "string"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "ChannelListenerCallback"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Listens to `eventName` and calls `listenerFunc(data)` when a new message arrives from the Node.js process.\n\n**Note:** When using the Electron platform, [`PluginListenerHandle.remove()`](#pluginlistenerhandle) does not work due to limitations.\nUse [`removeListener(listenerFunc)`](#removelistener) instead.",
        "complexTypes": [
          "PluginListenerHandle",
          "ChannelListenerCallback"
        ],
        "slug": "addlistenerstring"
      },
      {
        "name": "removeListener",
        "signature": "(listenerHandle: PluginListenerHandle) => Promise<void>",
        "parameters": [
          {
            "name": "listenerHandle",
            "docs": "",
            "type": "PluginListenerHandle"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Removes the specified `listenerHandle` from the listener array for the event it refers to.",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "removelistener"
      },
      {
        "name": "removeAllListeners",
        "signature": "(eventName?: string) => Promise<void>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "string"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Removes all listeners, or those of the specified `eventName`, for this plugin.",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "StartOptions",
      "slug": "startoptions",
      "docs": "An interface containing the options used when starting the Node.js engine manually.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "nodeDir",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Relative path of the integrated Node.js project based on the Capacitor webdir.\n\nDefaults to the `nodeDir` field of the global plugin configuration. If the `nodeDir` config\nis not set, `nodejs` in the Capacitor webdir is used as Node.js project directory.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "script",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The primary entry point to the Node.js program.\nThis should be a module relative to the root of the Node.js project folder.\n\nDefaults to the `main` field in the project's package.json. If the `main` field\nis not set, `index.js` in the project's root folder is used.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "args",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "A list of string arguments.",
          "complexTypes": [],
          "type": "string[]"
        },
        {
          "name": "env",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "Environment key-value pairs.",
          "complexTypes": [
            "NodeEnv"
          ],
          "type": "NodeEnv"
        }
      ]
    },
    {
      "name": "NodeEnv",
      "slug": "nodeenv",
      "docs": "An interface that holds environment variables as string key-value pairs.",
      "tags": [],
      "methods": [],
      "properties": []
    },
    {
      "name": "ChannelPayloadData",
      "slug": "channelpayloaddata",
      "docs": "The payload data to send a message to the web page via `eventName`,\nalong with arguments. Arguments will be serialized with JSON.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "eventName",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The name of the event being send to.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "args",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The array of arguments to send.",
          "complexTypes": [],
          "type": "any[]"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    },
    {
      "name": "ChannelCallbackData",
      "slug": "channelcallbackdata",
      "docs": "The callback data object when a message from the Node.js process arrives.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "args",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The received array of arguments.",
          "complexTypes": [],
          "type": "any[]"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "ChannelListenerCallback",
      "slug": "channellistenercallback",
      "docs": "The callback function to be called when listen to messages from the Node.js process.",
      "types": [
        {
          "text": "(data: ChannelCallbackData): void",
          "complexTypes": [
            "ChannelCallbackData"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": [
    {
      "name": "CapacitorNodeJS",
      "slug": "capacitornodejs",
      "properties": [
        {
          "name": "nodeDir",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"nodejs\"",
              "name": "default"
            },
            {
              "text": "\"custom-nodejs\"",
              "name": "example"
            }
          ],
          "docs": "Relative path of the integrated Node.js project based on the Capacitor webdir.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "startMode",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"auto\"",
              "name": "default"
            },
            {
              "text": "\"manual\"",
              "name": "example"
            }
          ],
          "docs": "Startup mode of the Node.js engine.\n\nThe following values are accepted:\n`auto`: The Node.js engine starts automatically when the application is launched.\n`manual`: The Node.js engine is started via the `NodeJS.start()` method.",
          "complexTypes": [],
          "type": "'auto' | 'manual'"
        }
      ],
      "docs": "These config values are available:"
    }
  ]
}