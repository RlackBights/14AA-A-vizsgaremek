{"version":3,"file":"NodeJS.js","sourceRoot":"","sources":["../../src/NodeJS.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAQ5C,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAsDnD,MAAM,YAAY;IAAlB;QACmB,iBAAY,GAGvB,EAAE,CAAC;IAqDX,CAAC;IAnDC,KAAK,CAAC,IAAmB;QACvB,OAAO,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,CAAC,IAAwB;QAC3B,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,SAAS;QACP,OAAO,eAAe,CAAC,SAAS,EAAE,CAAC;IACrC,CAAC;IAOD,WAAW,CAAC,SAAc,EAAE,YAAqC;QAC/D,MAAM,cAAc,GAAG,eAAe,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,IAAyB,EAAE,EAAE;YAC1F,YAAY,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC,CAAC;QACtD,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,cAAoC;QACvD,IAAI,SAAS,CAAC,WAAW,EAAE,KAAK,UAAU,EAAE;YAC1C,MAAO,eAAuB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;SAC/D;aAAM;YACL,MAAM,cAAc,CAAC,MAAM,EAAE,CAAC;SAC/B;QAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAE1C,IAAI,cAAc,KAAK,CAAC,MAAM,QAAQ,CAAC,cAAc,CAAC,EAAE;gBACtD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACnC,MAAM;aACP;SACF;IACH,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,SAAkB;QACzC,KAAK,MAAM,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE;YAC7C,IAAI,CAAC,SAAS,IAAI,SAAS,KAAK,QAAQ,CAAC,SAAS,EAAE;gBAClD,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,cAAc,CAAC;gBACrD,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;aAC3C;SACF;IACH,CAAC;CACF;AAED,MAAM,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AAElC,OAAO,EAAE,MAAM,EAAE,CAAC","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\nimport { Capacitor } from '@capacitor/core';\n\nimport type {\n  ChannelPayloadData,\n  ChannelCallbackData,\n  ChannelListenerCallback,\n  StartOptions\n} from './definitions';\nimport { CapacitorNodeJS } from './implementation';\n\nexport interface NodeJSInterface {\n  /**\n   * Starts the Node.js engine with properties as set by the `options`.\n   *\n   * **Note:** This method is only available if the Node.js engine startup mode was set to `'manual'` via the plugin configuration.\n   *\n   * @since 1.0.0\n   */\n  start(options?: StartOptions): Promise<void>;\n\n  /**\n   * Sends a message to the Node.js process.\n   *\n   * @since 1.0.0\n   */\n  send(args: ChannelPayloadData): Promise<void>;\n\n  /**\n   * Resolves when the Node.js process is initialized.\n   *\n   * @since 1.0.0\n   */\n  whenReady(): Promise<void>;\n\n  /**\n   * Listens to `eventName` and calls `listenerFunc(data)` when a new message arrives from the Node.js process.\n   *\n   * **Note:** When using the Electron platform, [`PluginListenerHandle.remove()`](#pluginlistenerhandle) does not work due to limitations.\n   * Use [`removeListener(listenerFunc)`](#removelistener) instead.\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: string,\n    listenerFunc: ChannelListenerCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes the specified `listenerHandle` from the listener array for the event it refers to.\n   *\n   * @since 1.0.0\n   */\n  removeListener(listenerHandle: PluginListenerHandle): Promise<void>;\n\n  /**\n   * Removes all listeners, or those of the specified `eventName`, for this plugin.\n   *\n   * @since 1.0.0\n   */\n  removeAllListeners(eventName?: string): Promise<void>;\n}\n\nclass NodeJSPlugin implements NodeJSInterface {\n  private readonly listenerList: {\n    eventName: string;\n    listenerHandle: Promise<PluginListenerHandle> & PluginListenerHandle;\n  }[] = [];\n\n  start(args?: StartOptions): Promise<void> {\n    return CapacitorNodeJS.start(args);\n  }\n\n  send(args: ChannelPayloadData): Promise<void> {\n    return CapacitorNodeJS.send(args);\n  }\n\n  whenReady(): Promise<void> {\n    return CapacitorNodeJS.whenReady();\n  }\n\n  addListener(\n    eventName: string,\n    listenerFunc: ChannelListenerCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(eventName: any, listenerFunc: ChannelListenerCallback): Promise<PluginListenerHandle> & PluginListenerHandle {\n    const listenerHandle = CapacitorNodeJS.addListener(eventName, (data: ChannelCallbackData) => {\n      listenerFunc(data);\n    });\n\n    this.listenerList.push({ eventName, listenerHandle });\n    return listenerHandle;\n  }\n\n  async removeListener(listenerHandle: PluginListenerHandle): Promise<void> {\n    if (Capacitor.getPlatform() === 'electron') {\n      await (CapacitorNodeJS as any).removeListener(listenerHandle);\n    } else {\n      await listenerHandle.remove();\n    }\n\n    for (let index = 0; index < this.listenerList.length; index++) {\n      const listener = this.listenerList[index];\n\n      if (listenerHandle === (await listener.listenerHandle)) {\n        this.listenerList.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  async removeAllListeners(eventName?: string): Promise<void> {\n    for (const listener of [...this.listenerList]) {\n      if (!eventName || eventName === listener.eventName) {\n        const listenerHandle = await listener.listenerHandle;\n        await this.removeListener(listenerHandle);\n      }\n    }\n  }\n}\n\nconst NodeJS = new NodeJSPlugin();\n\nexport { NodeJS };\n"]}