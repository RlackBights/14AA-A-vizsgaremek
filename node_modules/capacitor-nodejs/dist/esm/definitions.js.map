{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * These config values are available:\n     */\n    CapacitorNodeJS?: {\n      /**\n       * Relative path of the integrated Node.js project based on the Capacitor webdir.\n       *\n       * @since 1.0.0\n       * @default \"nodejs\"\n       * @example \"custom-nodejs\"\n       */\n      nodeDir?: string;\n\n      /**\n       * Startup mode of the Node.js engine.\n       *\n       * The following values are accepted:\n       * `auto`: The Node.js engine starts automatically when the application is launched.\n       * `manual`: The Node.js engine is started via the `NodeJS.start()` method.\n       *\n       * @since 1.0.0\n       * @default \"auto\"\n       * @example \"manual\"\n       */\n      startMode?: 'auto' | 'manual';\n    };\n  }\n}\n\n/**\n * An interface containing the options used when starting the Node.js engine manually.\n */\nexport interface StartOptions {\n  /**\n   * Relative path of the integrated Node.js project based on the Capacitor webdir.\n   *\n   * Defaults to the `nodeDir` field of the global plugin configuration. If the `nodeDir` config\n   * is not set, `nodejs` in the Capacitor webdir is used as Node.js project directory.\n   *\n   * @since 1.0.0\n   */\n  nodeDir?: string;\n\n  /**\n   * The primary entry point to the Node.js program.\n   * This should be a module relative to the root of the Node.js project folder.\n   *\n   * Defaults to the `main` field in the project's package.json. If the `main` field\n   * is not set, `index.js` in the project's root folder is used.\n   *\n   * @since 1.0.0\n   */\n  script?: string;\n\n  /**\n   * A list of string arguments.\n   *\n   * @since 1.0.0\n   */\n  args?: string[];\n\n  /**\n   * Environment key-value pairs.\n   *\n   * @since 1.0.0\n   */\n  env?: NodeEnv;\n}\n\n/**\n * An interface that holds environment variables as string key-value pairs.\n */\nexport interface NodeEnv {\n  [key: string]: string | undefined;\n}\n\n/**\n * The payload data to send a message to the web page via `eventName`,\n * along with arguments. Arguments will be serialized with JSON.\n */\nexport interface ChannelPayloadData {\n  /**\n   * The name of the event being send to.\n   *\n   * @since 1.0.0\n   */\n  eventName: string;\n\n  /**\n   * The array of arguments to send.\n   *\n   * @since 1.0.0\n   */\n  args: any[];\n}\n\n/**\n * The callback function to be called when listen to messages from the Node.js process.\n */\nexport type ChannelListenerCallback = (data: ChannelCallbackData) => void;\n\n/**\n * The callback data object when a message from the Node.js process arrives.\n */\nexport interface ChannelCallbackData {\n  /**\n   * The received array of arguments.\n   *\n   * @since 1.0.0\n   */\n  args: any[];\n}\n"]}